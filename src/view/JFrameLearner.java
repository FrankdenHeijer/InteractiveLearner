/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.*;

import controller.Protocol;
import controller.Learner;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Classifier;
import controller.Tester;
import java.io.FileNotFoundException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import controller.Protocol;
import controller.Protocol.classes;


/*
 * MOD 6 - Intelligent Interaction Design
 * AI Project: Interactive Learner
 *
 * @author Merijn Kleinreesink & Frank den Heijer
 * Created on: 20-12-2016
 */
public class JFrameLearner extends javax.swing.JFrame {

    private Classifier classifier;
    private Learner learner;
    private Tester tester;
    public String fileLocation = "";
    public String classifiable = "";
    public Boolean predictionBoolean;
    public File fileUsed;
    private JFileChooser chooser;
    public String content;
    
    public Boolean getPredictionBoolean() {
       return predictionBoolean;
    }
    
    public String getClassifiable(){
        return classifiable;
    }

    /**
     * Creates new form JFrameLearner
     */
    public JFrameLearner() { initComponents(); }
    
    /**
     * Simple getter on classifier
     * @return  classifier
     */
    public Classifier getClassifier() {
        return classifier;
    }
    
    /**
     * Simple setter for classifier
     * @param classifier 
     */
    public void setClassifier(Classifier classifier) {
        this.classifier = classifier;
    }

    /**
     * Simple getter on learner
     * @return learner
     */
    public Learner getLearner() {
        return learner;
    }

    /**
     * Simple setter on learner
     * @param learner 
     */
    public void setLearner(Learner learner) {
        this.learner = learner;
    }
    
    /**
     * Simple setter on textarea
     * @param textarea 
     */
    public void setTextarea(JTextArea textarea) {
        this.textarea = textarea;
    }
    
    /**
     * Simple getter on textarea
     * @return textarea
     */
    public JTextArea getTextarea() {
        return textarea;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always

     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textarea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setEditable(false);
        textarea.setColumns(20);
        textarea.setRows(5);
        jScrollPane1.setViewportView(textarea);

        jButton1.setText("Add to Corpus");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Select Folder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jScrollPane2.setViewportView(jTextPane1);

        jButton2.setText("Test Folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Originated from NetBeans documentation.
    /**
     * OpenActionPerformed method which opens a filechooser while clicking on file -> open file
     * @param evt 
     */
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        //Rule 238-243 : http://www.rgagnon.com/javadetails/java-0370.html
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select your file");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File d = chooser.getCurrentDirectory();
            jTextPane1.setText(d.getAbsolutePath());
            jTextPane1.setVisible(true);
            textarea.setEditable(false);
            textarea.append("You succesfully added a directory to the learner");
    } else {
        System.out.println("File access cancelled by user.");
    }
 
    }//GEN-LAST:event_OpenActionPerformed
    /**
     * Simple exit action
     * @param evt 
     */
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    /**
     * The 'add to corpus' button. This method will start the learner and will provide the initial set-up for learning process of classifier
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
        clearTextarea();
        content = JOptionPane.showInputDialog("What do you want to classify?");
        if(content != ""){
            try {
                learner.learn(classifier, this);
                classifier.train();
            } catch (IOException ex) {
                Logger.getLogger(JFrameLearner.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Oops, something went wrong. Please try again");
        }}
    
/**
 * Same method as openActionPerformed.
 * @param evt 
 */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 //Rule 291-296 orginated from: http://www.rgagnon.com/javadetails/java-0370.html
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select your file");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File d = chooser.getSelectedFile();
            fileLocation = d.getAbsolutePath();
            jTextPane1.setText(d.getAbsolutePath());
            textarea.setEditable(false);
            textarea.append("You succesfully added a directory to the learner");
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    /**
     * The method to test the classifier. While clicking it will interact with tester to show the accuracy of the learner.
     * @param evt 
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(!fileLocation.equals("")) {
            //Makes sure that the right path is given to classifiable
            Path p = Paths.get(fileLocation);
            classifiable = p.getFileName().toString();
            try {
                tester.measure(classifier, fileLocation, classifiable, this);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFrameLearner.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFrameLearner.class.getName()).log(Level.SEVERE, null, ex);
            }
                }
        else{
            JOptionPane.showMessageDialog(null, "you should first select a file");
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed
    
    /**
     * Dialog which originates from learner. Once the user has given a string to classify, this dialog will show the prediction and asks for input.
     * @param prediction
     * @throws IOException 
     */
    public void predictionDialog(String prediction) throws IOException {
        String pString = JOptionPane.showInputDialog("This is the class we predicted for your input: " + prediction + ". Do you agree?");
        System.out.println(pString);
        if(pString.equals("y")) {
            predictionBoolean = true;
            //Continuelearning will be instantized in learner. Enables us to first finish the GUI before carrying out methods.
            learner.continueLearning(classifier, this, predictionBoolean);
        }
        else{
            predictionBoolean = false;
            //Continuelearning will be instantized in learner. Enables us to first finish the GUI before carrying out methods.
            learner.continueLearning(classifier, this, predictionBoolean);
        }
    }
    
    /**
     * Dialog which originates from learner. Once the user shows that a prediction is wrong, the method will arise.
     */
    public void falsePredictionDialog() {
       String corrected = JOptionPane.showInputDialog("What should be the right class?");
       corrected = corrected.toUpperCase();
       List<String> rightClasses = new ArrayList<String>();
       for(classes c : classes.values()){
           String name = c.name();
           rightClasses.add(name);
       }
       if(rightClasses.contains(corrected)) {
           try {
               //CorrectedLearning will be instantized in learner. Enables us to first finish the GUI before carrying out methods
               learner.correctedLearning(this, corrected);
           } catch (IOException ex) {
               Logger.getLogger(JFrameLearner.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
       else{
           JOptionPane.showMessageDialog(null, "Oops, the class you provided wasn't right");
           appendToTextarea("You can add a new document to train or you can test the learner by pressing the corresponding buttons ");
       }
       
    }
    /**
     * Simple method for appending text to textarea
     * @param string 
     */
    public void appendToTextarea(String string){
        textarea.append(string);
    }
    
    /**
     * Simple method which empties the textarea
     */
    public void clearTextarea() {
        textarea.setText("");
    }
    
    /**
     * Simple getter on content
     * @return content
     */
    public String getContent() {
        return content;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        //try {
         //   for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         //       if ("Nimbus".equals(info.getName())) {
         //           javax.swing.UIManager.setLookAndFeel(info.getClassName());
         //           break;
         //       }
         //   }
        //    JFrame.setDefaultLookAndFeelDecorated(true);
        //} catch (ClassNotFoundException ex) {
        //    java.util.logging.Logger.getLogger(JFrameLearner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (InstantiationException ex) {
        //    java.util.logging.Logger.getLogger(JFrameLearner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (IllegalAccessException ex) {
        //    java.util.logging.Logger.getLogger(JFrameLearner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (javax.swing.UnsupportedLookAndFeelException ex) {
        //    java.util.logging.Logger.getLogger(JFrameLearner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        // }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JFrameLearner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextArea textarea;
    // End of variables declaration//GEN-END:variables
}
